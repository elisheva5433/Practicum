{"ast":null,"code":"var _jsxFileName = \"C:\\\\PRACTICUM\\\\PracticLearningProject\\\\client\\\\src\\\\components\\\\Prompt.js\",\n  _s = $RefreshSig$();\nimport OpenAI from \"openai\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\n// const client = new OpenAI({\n//   apiKey: process.env.REACT_APP_OPENAI_API_KEY\n// });\n\n// export async function sendPromptToOpenAI(prompt, topic, subtopic) {\n//     const response = await client.chat.completions.create({\n//         model: \"gpt-4o-mini\",\n//         messages: [{ role: \"user\", content: `${prompt} in topic ${topic} in sub topic ${subtopic}` }]\n//     });\n//     return response.choices[0].message.content;\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Prompt({\n  category,\n  subCategory\n}) {\n  _s();\n  // const handleSend = (prompt) => {\n  //     // const response=sendPromptToOpenAI(prompt, topic, subtopic)\n  // }\n\n  async function sendPrompt(prompt) {\n    // Create an object with the data to send\n    const promptData = {\n      \"UserId\": 2,\n      \"CategoryId\": 2,\n      \"SubcategoryId\": 2,\n      \"PromptText\": prompt,\n      \"Response\": \"string\",\n      \"CreatedAt\": \"2025-09-16T12:27:29.943Z\"\n    };\n    try {\n      // Post the data to the correct endpoint\n      console.log(\"Sending prompt data:\", promptData);\n      try {\n        const response = await axios.post(\"http://localhost:5084/api/Prompts/CreatePrompt\", promptData);\n        console.log(\"AI response:\", response.data);\n      } catch (error) {\n        console.error(\"Error posting prompt data:\", error);\n        return;\n      }\n    } catch (err) {\n      console.error(\"Error:\", err);\n    }\n  }\n\n  // async function sendPrompt(prompt) {\n  //     // const promptToSend = {\n  //     //     categoryId: category,\n  //     //     subCategoryId: subCategory,\n  //     //     promptText: prompt\n  //     // };\n\n  //     try {\n  //         // const response = await axios.post(\"http://localhost:5000/api/OpenAI/GenerateText\", promptToSend);\n  //         const response = await axios.post(`http://localhost:5084/api/prompts/${category}/${subCategory}/lll`);\n\n  //         console.log(\"AI response:\", response.data);\n  //     } catch (err) {\n  //         console.error(\"Error:\", err);\n  //     }\n  // }\n\n  const [prompt, setPrompt] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"write what you want to know:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your prompt here...\",\n      value: prompt,\n      onChange: e => setPrompt(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendPrompt(prompt),\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Prompt, \"aktPPfsqt7fI0SQCfTqjxGF+A+w=\");\n_c = Prompt;\nexport default Prompt;\nvar _c;\n$RefreshReg$(_c, \"Prompt\");","map":{"version":3,"names":["OpenAI","useState","axios","jsxDEV","_jsxDEV","Prompt","category","subCategory","_s","sendPrompt","prompt","promptData","console","log","response","post","data","error","err","setPrompt","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/PRACTICUM/PracticLearningProject/client/src/components/Prompt.js"],"sourcesContent":["import OpenAI from \"openai\";\r\nimport { useState } from \"react\";\r\n  import axios from \"axios\";\r\n\r\n// const client = new OpenAI({\r\n//   apiKey: process.env.REACT_APP_OPENAI_API_KEY\r\n// });\r\n\r\n\r\n// export async function sendPromptToOpenAI(prompt, topic, subtopic) {\r\n//     const response = await client.chat.completions.create({\r\n//         model: \"gpt-4o-mini\",\r\n//         messages: [{ role: \"user\", content: `${prompt} in topic ${topic} in sub topic ${subtopic}` }]\r\n//     });\r\n//     return response.choices[0].message.content;\r\n\r\n// }\r\n\r\n\r\nfunction Prompt({category, subCategory}) {\r\n\r\n\r\n    // const handleSend = (prompt) => {\r\n    //     // const response=sendPromptToOpenAI(prompt, topic, subtopic)\r\n    // }\r\n\r\nasync function sendPrompt(prompt) {\r\n    // Create an object with the data to send\r\nconst promptData = {\r\n  \"UserId\": 2,\r\n  \"CategoryId\": 2,\r\n  \"SubcategoryId\": 2,\r\n  \"PromptText\": prompt,\r\n  \"Response\": \"string\",\r\n  \"CreatedAt\": \"2025-09-16T12:27:29.943Z\"\r\n}\r\n\r\n    try {\r\n        // Post the data to the correct endpoint\r\n        console.log(\"Sending prompt data:\", promptData);\r\n        try{\r\n        const response = await axios.post(\"http://localhost:5084/api/Prompts/CreatePrompt\", promptData);\r\n        console.log(\"AI response:\", response.data);\r\n    } catch (error) {\r\n            console.error(\"Error posting prompt data:\", error);\r\n            return;\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error:\", err);\r\n    }\r\n}\r\n  \r\n\r\n    // async function sendPrompt(prompt) {\r\n    //     // const promptToSend = {\r\n    //     //     categoryId: category,\r\n    //     //     subCategoryId: subCategory,\r\n    //     //     promptText: prompt\r\n    //     // };\r\n\r\n    //     try {\r\n    //         // const response = await axios.post(\"http://localhost:5000/api/OpenAI/GenerateText\", promptToSend);\r\n    //         const response = await axios.post(`http://localhost:5084/api/prompts/${category}/${subCategory}/lll`);\r\n\r\n    //         console.log(\"AI response:\", response.data);\r\n    //     } catch (err) {\r\n    //         console.error(\"Error:\", err);\r\n    //     }\r\n    // }\r\n\r\n\r\n    const [prompt, setPrompt] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <h2>write what you want to know:</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Type your prompt here...\"\r\n                value={prompt}\r\n                onChange={(e) => setPrompt(e.target.value)} />\r\n            <button onClick={() => sendPrompt(prompt)}>send</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Prompt;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,QAAQ,QAAQ,OAAO;AAC9B,OAAOC,KAAK,MAAM,OAAO;;AAE3B;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,MAAMA,CAAC;EAACC,QAAQ;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAGrC;EACA;EACA;;EAEJ,eAAeC,UAAUA,CAACC,MAAM,EAAE;IAC9B;IACJ,MAAMC,UAAU,GAAG;MACjB,QAAQ,EAAE,CAAC;MACX,YAAY,EAAE,CAAC;MACf,eAAe,EAAE,CAAC;MAClB,YAAY,EAAED,MAAM;MACpB,UAAU,EAAE,QAAQ;MACpB,WAAW,EAAE;IACf,CAAC;IAEG,IAAI;MACA;MACAE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,UAAU,CAAC;MAC/C,IAAG;QACH,MAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAAC,gDAAgD,EAAEJ,UAAU,CAAC;QAC/FC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACRL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD;MACJ;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVN,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEC,GAAG,CAAC;IAChC;EACJ;;EAGI;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA,MAAM,CAACR,MAAM,EAAES,SAAS,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxC,oBACIG,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCpB,OAAA;MACIqB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,0BAA0B;MACtCC,KAAK,EAAEjB,MAAO;MACdkB,QAAQ,EAAGC,CAAC,IAAKV,SAAS,CAACU,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDpB,OAAA;MAAQ2B,OAAO,EAAEA,CAAA,KAAMtB,UAAU,CAACC,MAAM,CAAE;MAAAU,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEd;AAAChB,EAAA,CAhEQH,MAAM;AAAA2B,EAAA,GAAN3B,MAAM;AAiEf,eAAeA,MAAM;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}