{"ast":null,"code":"var _jsxFileName = \"C:\\\\PRACTICUM\\\\PracticLearningProject\\\\client\\\\src\\\\components\\\\Prompt.js\",\n  _s = $RefreshSig$();\nimport OpenAI from \"openai\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\n// const client = new OpenAI({\n//   apiKey: process.env.REACT_APP_OPENAI_API_KEY\n// });\n\n// export async function sendPromptToOpenAI(prompt, topic, subtopic) {\n//     const response = await client.chat.completions.create({\n//         model: \"gpt-4o-mini\",\n//         messages: [{ role: \"user\", content: `${prompt} in topic ${topic} in sub topic ${subtopic}` }]\n//     });\n//     return response.choices[0].message.content;\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Prompt(category, subCategory) {\n  _s();\n  // const handleSend = (prompt) => {\n  //     // const response=sendPromptToOpenAI(prompt, topic, subtopic)\n  // }\n\n  async function sendPrompt(prompt) {\n    // const promptToSend = {\n    //     categoryId: category,\n    //     subCategoryId: subCategory,\n    //     promptText: prompt\n    // };\n\n    try {\n      // const response = await axios.post(\"http://localhost:5000/api/OpenAI/GenerateText\", promptToSend);\n      const response = await axios.post(`http://localhost:5000/api/${category}/${subCategory}/${prompt}`);\n      console.log(\"AI response:\", response.data);\n    } catch (err) {\n      console.error(\"Error:\", err);\n    }\n  }\n  const [prompt, setPrompt] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"write what you want to know:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your prompt here...\",\n      value: prompt,\n      onChange: e => setPrompt(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendPrompt,\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(Prompt, \"aktPPfsqt7fI0SQCfTqjxGF+A+w=\");\n_c = Prompt;\nexport default Prompt;\nvar _c;\n$RefreshReg$(_c, \"Prompt\");","map":{"version":3,"names":["OpenAI","useState","axios","jsxDEV","_jsxDEV","Prompt","category","subCategory","_s","sendPrompt","prompt","response","post","console","log","data","err","error","setPrompt","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/PRACTICUM/PracticLearningProject/client/src/components/Prompt.js"],"sourcesContent":["import OpenAI from \"openai\";\r\nimport { useState } from \"react\";\r\n  import axios from \"axios\";\r\n\r\n// const client = new OpenAI({\r\n//   apiKey: process.env.REACT_APP_OPENAI_API_KEY\r\n// });\r\n\r\n\r\n// export async function sendPromptToOpenAI(prompt, topic, subtopic) {\r\n//     const response = await client.chat.completions.create({\r\n//         model: \"gpt-4o-mini\",\r\n//         messages: [{ role: \"user\", content: `${prompt} in topic ${topic} in sub topic ${subtopic}` }]\r\n//     });\r\n//     return response.choices[0].message.content;\r\n\r\n// }\r\n\r\n\r\nfunction Prompt(category, subCategory) {\r\n\r\n    // const handleSend = (prompt) => {\r\n    //     // const response=sendPromptToOpenAI(prompt, topic, subtopic)\r\n    // }\r\n\r\n\r\n  \r\n\r\n    async function sendPrompt(prompt) {\r\n        // const promptToSend = {\r\n        //     categoryId: category,\r\n        //     subCategoryId: subCategory,\r\n        //     promptText: prompt\r\n        // };\r\n\r\n        try {\r\n            // const response = await axios.post(\"http://localhost:5000/api/OpenAI/GenerateText\", promptToSend);\r\n            const response = await axios.post(`http://localhost:5000/api/${category}/${subCategory}/${prompt}`);\r\n\r\n            console.log(\"AI response:\", response.data);\r\n        } catch (err) {\r\n            console.error(\"Error:\", err);\r\n        }\r\n    }\r\n\r\n\r\n    const [prompt, setPrompt] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <h2>write what you want to know:</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Type your prompt here...\"\r\n                value={prompt}\r\n                onChange={(e) => setPrompt(e.target.value)} />\r\n            <button onClick={sendPrompt}>send</button>\r\n        </div>\r\n    );\r\n}\r\nexport default Prompt;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,SAASC,QAAQ,QAAQ,OAAO;AAC9B,OAAOC,KAAK,MAAM,OAAO;;AAE3B;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,MAAMA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAAC,EAAA;EAEnC;EACA;EACA;;EAKA,eAAeC,UAAUA,CAACC,MAAM,EAAE;IAC9B;IACA;IACA;IACA;IACA;;IAEA,IAAI;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,6BAA6BN,QAAQ,IAAIC,WAAW,IAAIG,MAAM,EAAE,CAAC;MAEnGG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC9C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVH,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAED,GAAG,CAAC;IAChC;EACJ;EAGA,MAAM,CAACN,MAAM,EAAEQ,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,oBACIG,OAAA;IAAAe,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCnB,OAAA;MACIoB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,0BAA0B;MACtCC,KAAK,EAAEhB,MAAO;MACdiB,QAAQ,EAAGC,CAAC,IAAKV,SAAS,CAACU,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDnB,OAAA;MAAQ0B,OAAO,EAAErB,UAAW;MAAAU,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEd;AAACf,EAAA,CAvCQH,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAwCf,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}